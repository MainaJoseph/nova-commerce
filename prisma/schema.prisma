datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String? @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  active             Boolean @default(false)
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt @default(now())
  role               Role @default(USER)
  lastUsernameChange DateTime? @default(now())
  accounts           Account[]
  orders             Order[]
  reviews            Review[]
  activateToken      ActivateToken[]
  chatMessages       ChatMessage[]
  chatSessions       ChatSession[]
}

model ActivateToken {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  token       String @unique
  activateAt  DateTime?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt @default(now())
  user        User @relation(fields: [userId], references: [id])
  userId      String @db.ObjectId
}

model Product {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  price        Float
  brand        String
  category     String
  inStock      Boolean
  images       Image[]
  reviews      Review[]
}

model Review {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  productId    String @db.ObjectId
  rating       Int
  comment      String
  createdDate  DateTime @default(now())
  pinned       Boolean @default(false)
  product      Product @relation(fields: [productId], references: [id])
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  amount   Float
  currency String
  status   String
  deliveryStatus String?
  createdDate    DateTime @default(now())
  paymentIntentId  String @unique
  products         CartProductType[]
  address          Address?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  sender     String
  text       String
  type       String
  timestamp  String   // Add this field
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  sessionId  String   @db.ObjectId
  session    ChatSession @relation(fields: [sessionId], references: [id])
}



model ChatSession {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId
  createdAt  DateTime   @default(now())
  messages   ChatMessage[]
  user       User       @relation(fields: [userId], references: [id])
}

type CartProductType {
  id String
  name String
  description String
  category String
  brand String
  selectedImg Image
  quantity Int
  price Float
}

type Image {
  color String
  colorCode String
  image String
}

type Address {
  city String
  country String
  line1 String
  line2 String?
  postal_code String
  state String
}

enum Role {
  USER
  ADMIN
  AGENT
}
